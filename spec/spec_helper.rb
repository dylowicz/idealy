# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause this
# file to always be loaded, without a need to explicitly require it in any files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

ENV["RAILS_ENV"] ||= 'test'
require File.expand_path("../../config/environment", __FILE__)
require 'rspec/rails'
require 'shoulda/matchers'
require 'watir'
require 'watir-webdriver'
require 'page-object'
require 'pry'

require_rel 'integration/support'

RSpec.configure do |config|
  config.include PageObject::PageFactory

  config.expect_with :rspec do |expectations|
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  config.before(:all) do
    ENV['BROWSER'] ||= "chrome"
    @browser_res_x = 1366
    @browser_res_y = 768

    case ENV['BROWSER']
      when 'firefox'
        @browser = Watir::Browser.new :firefox
      when 'chrome'
        @browser = Watir::Browser.new :chrome, :switches => %w[--test-type]
      else
        raise "Unsupported browser: " + ENV['BROWSER']
    end
    @browser.window.resize_to(@browser_res_x, @browser_res_y)

    case ENV['RAILS_ENV']
      when 'test'
        ENV['DOMAIN'] = 'http://localhost:3000'
    end

    @browser.goto ENV['DOMAIN']
  end

  config.after(:all) do
    @browser.close unless @browser.nil?
  end
end
